/**
 * Write a function to create a 2-D List/Array with random integers between 0 to 100. This
 * function should take two arguments - numberOfRows and numberOfColumns and return a 2D list.
 */
function create2DArray(numberOfRows, numberOfColumns) {
  let arr = [];
  for (let i = 0; i < numberOfRows; i++) {
    let row = [];
    for (let j = 0; j < numberOfColumns; j++) {
      row.push(Math.floor(Math.random() * 101));
    }
    arr.push(row);
  }
  return arr;
}

console.log(create2DArray(3, 3));

// Output
/*
[
  [1, 86, 44],
  [67, 79, 75],
  [18, 56, 66],
];
*/


/**
 * Write a function to sort the 2-D list based on column index keeping the rows intact. This
 * function should take two arguments - 2D list created above and column Index and return sorted
 * 2D list.
 */
function sort2DList(arr, index) {
  let newArr = arr.sort((a, b) => {
    return a[index] - b[index];
  });
  return newArr;
}

const arr = [
  [21, 4, 79],
  [6, 34, 43],
  [15, 54, 23],
];
console.log(sort2DList(arr, 2));

// Output
/*
[
  [15, 54, 23],
  [6, 34, 43],
  [21, 4, 79],
];
*/


/**
 * 3. Please write the code for below question:-
 */
// Sample Input

function groupObjects(inputArr) {
  let uniqueCategObj = {};
  inputArr.forEach((obj) => {
    let key = `${obj.category}_${obj.year}`;
    if (typeof uniqueCategObj[key] === "object") {
      uniqueCategObj[key].push(obj);
    } else {
      uniqueCategObj[key] = [obj];
    }
  });
  let resArr = [];
  for (let uniqueKeyArr in uniqueCategObj) {
    let categoryYearArr = uniqueKeyArr.split("_");
    let category = categoryYearArr[0];
    let year = categoryYearArr[1];
    let tempObj = {};
    tempObj["category"] = category;
    tempObj["year"] = year;
    tempObj["winners"] = [];
    let researchFreq = {};
    uniqueCategObj[uniqueKeyArr].forEach((person) => {
      researchFreq[person.research] = researchFreq[person.research]
        ? researchFreq[person.research] + 1
        : 1;
    });
    let equalPercentage = 1 / Object.keys(researchFreq).length;
    tempObj["winners"] = uniqueCategObj[uniqueKeyArr].map((person) => {
      let obj = {};
      obj["name"] = person.name;
      obj["share"] =
        researchFreq[person.research] == 1
          ? equalPercentage
          : equalPercentage / researchFreq[person.research];
      return obj;
    });
    resArr.push(tempObj);
  }
  return resArr;
}
const awards = [
  {
    name: "James Peebles",
    category: "Physics",
    research: "Theoretical discoveries in physical cosmology",
    year: 2019,
  },
  {
    name: "Michel Mayor",
    category: "Physics",
    research: "Discovery of an exoplanet orbiting a solar-type star",
    year: 2019,
  },
  {
    name: "Didier Queloz",
    category: "Physics",
    research: "Discovery of an exoplanet orbiting a solar-type star",
    year: 2019,
  },
  {
    name: "John B. Goodenough",
    category: "Chemistry",
    research: "Development of lithium-ion batteries",
    year: 2019,
  },
  {
    name: "M. Stanley Whittingham",
    category: "Chemistry",
    research: "Development of lithium-ion batteries",
    year: 2019,
  },
  {
    name: "Akira Yoshino",
    category: "Chemistry",
    research: "Development of lithium-ion batteries",
    year: 2019,
  },
  {
    name: "Arthur Ashkin",
    category: "Physics",
    research: "Optical tweezers and their application to biological systems",
    year: 2018,
  },
  {
    name: "Gerard Mourou",
    category: "Physics",
    research: "Method of generating high-intensity, ultra-short optical pulses",
    year: 2018,
  },
  {
    name: "Donna Strickland",
    category: "Physics",
    research: "Method of generating high-intensity, ultra-short optical pulses",
    year: 2018,
  },
  {
    name: "Frances H. Arnold",
    category: "Chemistry",
    research: "Directed evolution of enzymes",
    year: 2018,
  },
  {
    name: "George P. Smith",
    category: "Chemistry",
    research: "Phage display of peptides and antibodies.",
    year: 2018,
  },

  {
    name: "Sir Gregory P. Winter",
    category: "Chemistry",
    research: "Phage display of peptides and antibodies.",
    year: 2018,
  },
];
console.log(groupObjects(awards));

//Output
/*
[
  {
    category: "Physics",
    year: "2019",
    winners: [
      {
        name: "James Peebles",
        share: 0.5,
      },
      {
        name: "Michel Mayor",
        share: 0.25,
      },
      {
        name: "Didier Queloz",
        share: 0.25,
      },
    ],
  },
  {
    category: "Chemistry",
    year: "2019",
    winners: [
      {
        name: "John B. Goodenough",
        share: 0.3333333333333333,
      },
      {
        name: "M. Stanley Whittingham",
        share: 0.3333333333333333,
      },
      {
        name: "Akira Yoshino",
        share: 0.3333333333333333,
      },
    ],
  },
  {
    category: "Physics",
    year: "2018",
    winners: [
      {
        name: "Arthur Ashkin",
        share: 0.5,
      },
      {
        name: "Gerard Mourou",
        share: 0.25,
      },
      {
        name: "Donna Strickland",
        share: 0.25,
      },
    ],
  },
  {
    category: "Chemistry",
    year: "2018",
    winners: [
      {
        name: "Frances H. Arnold",
        share: 0.5,
      },
      {
        name: "George P. Smith",
        share: 0.25,
      },
      {
        name: "Sir Gregory P. Winter",
        share: 0.25,
      },
    ],
  },
];
*/



//1.Come upwith data structures which can represent input andoutput.
//2.Write a functionwhich can take a single parameter(input) andreturns(output).
//3.Write optimizedsolutions toreduce the number ofiterations -avoidgroupby.
// Input
const portfolio = [
  { name: "Mark", stock: "FB" },
  { name: "Steve", stock: "AAPL" },
  { name: "Tim", stock: "AAPL" },
  { name: "Steve", stock: "MSFT" },
  { name: "Bill", stock: "MSFT" },
  { name: "Bill", stock: "AAPL" },
];

function getResult(arr) {
  const obj = {};
  const stocksObj = {};
  for (let i = 0; i < arr.length; i++) {
    const { name, stock } = arr[i];
    if (!obj[name]) {
      obj[name] = [];
    }
    obj[name].push(stock);
    if (!stocksObj[stock]) {
      stocksObj[stock] = { stock, name: [], count: 0 };
    }
    stocksObj[stock].name.push(name);
    stocksObj[stock].count++;
  }
  const result = [];
  for (const stock in stocksObj) {
    const { name, count } = stocksObj[stock];
    result.push({ stock, name, count });
  }
  return result;
}

console.log(getResult(portfolio));

//Output
/*
 [
  { stock: 'FB', name: [ 'Mark' ], count: 1 },
  { stock: 'AAPL', name: [ 'Steve', 'Tim', 'Bill' ], count: 3 },
  { stock: 'MSFT', name: [ 'Steve', 'Bill' ], count: 2 }
]
*/


/*
2 sorted Arrays are given
1st array is in ascending order [ 2,5,7,9]
2nd array is in descending order [25, 15, 9,4,1]
Join the arrays
Use the argument and return combined sorted array (either is ascending or descending order).
Don't remove the concurrency.
*/

function joinSortedArrays(arr1, arr2, ascending = true) {
  let i = 0;
  let j = arr2.length - 1;
  let sign = ascending ? 1 : -1;
  let result = [];

  while (i < arr1.length && j >= 0) {
    if (arr1[i] * sign <= arr2[j] * sign) {
      result.push(arr1[i]);
      i++;
    } else {
      result.push(arr2[j]);
      j--;
    }
  }

  while (i < arr1.length) {
    result.push(arr1[i]);
    i++;
  }

  while (j >= 0) {
    result.push(arr2[j]);
    j--;
  }

  if (!ascending) {
    result.reverse();
  }

  return result;
}

let arr1 = [2, 5, 7, 9];
let arr2 = [25, 15, 9, 4, 1];

console.log(joinSortedArrays(arr1, arr2, true));

// [1, 2, 4, 5, 7, 9, 9, 15, 25];


/**
 * Sort the arr a =[1,3,6,4,7,8,7] in ascending order without using predefined functions
 */
function sortArr(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = i + 1; j < arr.length; j++) {
      if (arr[i] > arr[j]) {
        let temp = a[i];
        arr[i] = arr[j];
        arr[j] = temp;
      }
    }
  }
  return a;
}

let a = [1, 3, 6, 4, 7, 8, 7];
console.log(sortArr(a));

//[1, 3, 4, 6, 7, 7, 8];


/*
arr a = [1,5,3,[4,8,7,0,6,[7,9,7,8]]]
Required output :
arr a =[1,5,3,4,8,7,0,6,7,9,7,8]
*/

let newArr = [];
function flatArray(arr) {
  for (let i = 0; i < arr.length; i++) {
    if (Array.isArray(arr[i])) {
      return flatArray(arr[i]);
    } else {
      newArr.push(arr[i]);
    }
  }
  return newArr;
}

let a = [1, 5, 3, [4, 8, 7, 0, 6, [7, 9, 7, 8]]];
a = flatArray(a);
console.log(a);
// [1,5,3,4,8,7,0,6,7,9,7,8]
